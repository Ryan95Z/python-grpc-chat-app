import src.server.chat_pb2 as chat_pb2


def create_chat_user_object(username):
    """Create a chat user grpc message object

    Args:
        username: The user's username

    Returns:
        A chat user grpc message object

    Raises:
        ValueError: if the username is empty or None
    """
    if (len(username) == 0) or (username is None):
        raise ValueError("username cannot be empty or None")
    return chat_pb2.ChatUser(username=username)


def create_chat_user_connected_object(user_id, username):
    """Create a chat user connected grpc message object

    Args:
        user_id:    The user's Id that would be generated by the server
        username:   The user's username

    Returns:
        A chat user connected grpc message object

    Raises:
        ValueError: If the user_id is less than or equal to zero
                    If the username is empty or None
    """
    if user_id <= 0:
        raise ValueError("user Id should be greater than 0")

    if (len(username) == 0) or (username is None):
        raise ValueError("username cannot be empty or None")

    return chat_pb2.ChatUserConnected(userId=user_id, username=username)


def create_chat_message_object(user_id, username, message):
    """Create a chat message grpc object

    Args:
        user_id:    The user's Id that would be generated by the server
        username:   The user's username
        message:    The message that would be sent over the chat

    Returns:
        A grpc chat message object

    Raises:
        ValueError: If the user_id is less than or equal to zero
                    If the username is empty or None
                    if the message is empty or None
    """
    if user_id <= 0:
        raise ValueError("user Id should be greater than 0")

    if (len(username) == 0) or (username is None):
        raise ValueError("username cannot be empty or None")

    if (len(message) == 0) or (message is None):
        raise ValueError("username cannot be empty or None")

    return chat_pb2.ChatMessage(userId=user_id, username=username, message=message)


def create_chat_user_disconnected_object():
    return chat_pb2.ChatUserDisconnect(isDisconnected=True)
